/*
* This Java source file was generated by the Gradle 'init' task.
*/
package charucotest;




//import nu.pattern.OpenCV;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.CvType;
import org.opencv.core.Scalar;

import org.opencv.core.*;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.QRCodeDetector;


import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import org.opencv.core.MatOfByte;
import org.opencv.core.Size;



import org.opencv.videoio.VideoCapture;
import java.util.concurrent.*;

import org.opencv.aruco.Aruco;
import org.opencv.aruco.ArucoDetector;
import org.opencv.aruco.DetectorParameters;
import org.opencv.aruco.Dictionary;

import java.util.ArrayList;
import java.util.List;

public class App {


    public static JFrame frame;

    public static String currentpath;


    public static void main(String[] args) {
        currentpath = System.getProperty("user.dir");
        System.out.println("current path is:" + currentpath);
        System.load(currentpath+"/lib/libopencv_java460.so");
        Dictionary dictionary= Aruco.getPredefinedDictionary(Aruco.DICT_4X4_50);
        DetectorParameters parameters= DetectorParameters.create();
        //parameters.set_cornerRefinementMethod(Aruco.CORNER_REFINE_NONE);
        //parameters.set_cornerRefinementMethod();
        ArucoDetector detector= new ArucoDetector(dictionary,parameters);
    
        System.out.println("Welcome to OpenCV " + Core.VERSION);
        List<Mat> corners = new ArrayList<Mat>();
        //List<Mat> rejectedImgPoints = new ArrayList<Mat>();
        Mat ids = new Mat();
        // [12,12]
        Mat img2 = Imgcodecs.imread(currentpath+"/assets/card.jpg");
        detector.detectMarkers(img2, corners, ids);
        System.out.println("OpenCV Mat: " + ids.dump());
        System.out.println("OpenCV size idds  " + ids.size());
        System.out.println("OpenCV Mat Corner: " + String.valueOf(corners.size()));
        //Aruco.drawDetectedMarkers(img2, corners,ids);
        //Imgcodecs.imencode(".jpg", img, m);

    } 




/*

   public static Mat sharpen(Mat src){
    Mat dest = new Mat(src.rows(), src.cols(), src.type());
    Imgproc.GaussianBlur(src, dest, new Size(5,5), 10);
    Core.addWeighted(src, 1.5, dest, -0.5, 10, dest);
    return dest;
   }

    public static void showResult(Mat img,ArucoDetector detector) {
        //Core.flip(img,img,0);
        boolean found = false;
        //Imgproc.resize(img, img, new Size(640, 480));
        //
        //img = sharpen(img);
        //MatOfByte m = new MatOfByte();
        //Imgcodecs.imencode(".jpg", img, m);

        if (ids.empty()){
            System.out.println("No markers found");
        }
        else{
            System.out.println("Found " + ids.rows() + " markers");
            System.out.println(ids.dump());
            System.out.println(ids.get(0,0));
            System.out.println(ids.get(0,1));
            System.out.println(ids.get(1,0));
            System.out.println(ids.get(1,1));
        }
        byte[] byteArray = m.toArray();
        BufferedImage bufImage = null;
        try {
            frame.setVisible(true);
            frame.repaint();
            InputStream in = new ByteArrayInputStream(byteArray);
            bufImage = ImageIO.read(in);
            frame.getContentPane().removeAll();
            frame.getContentPane().add(new JLabel(new ImageIcon(bufImage)));
            if (found) {
                try {
                    TimeUnit.SECONDS.sleep(300);
                    System.out.println("Found");
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
     */
}
